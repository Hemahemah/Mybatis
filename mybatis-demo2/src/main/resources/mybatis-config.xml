<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

<!--
    1.properties标签:可以引入外部properties配置文件的内容
        1).resource:引入类路径下的资源
        2).url:引入网络路径或磁盘路径下的资源
-->
    <properties resource="dbconfig.properties"/>

<!--
    2.settings标签:这是 MyBatis 中极为重要的调整设置,name:设置名,value:设置项值
        1).mapUnderscoreToCamelCase:开启驼峰命名自动映射,如数据库名:A_COLUMN——>aColumn,默认为false
-->
    <settings>
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>

<!--
    3.typeAliases标签:别名处理器,为java类型起别名(别名不区分大小写)
        type:指定起别名的类型全类名,默认别名为类名小写
        alias:指定新的别名
    4.package标签:为某个包下所有类批量起别名
        name:指定包名,为当前包以及下面所有的后代包的每一个类默认起一个别名
        批量起别名的情况下,起别名也可以使用@Alias注解,防止类名相同时取别名重复报错的问题
-->
    <typeAliases>
        <!--<typeAlias type="com.zlh.mybatis.bean.Employee" alias="emp"/>-->
        <package name="com.zlh.mybatis.bean"/>
    </typeAliases>


<!--
    5.environments标签:配置多种环境,default指定使用某种环境,可以达到快速切换
        environment标签:配置一种环境,id代表当前环境的唯一标识
            transactionManager标签:事务管理器,type为事务管理类型 JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)
                也可以自定义事务管理的类型(实现TransactionFactory接口)
            dataSource标签:数据源,type为数据源类型 UNPOOLED|POOLED|JNDI
                UNPOOLED(UnpooledDataSourceFactory):不使用连接池,这个数据源的实现会每次请求时打开和关闭连接
                POOLED(PooledDataSourceFactory):使用数据库连接池
                JNDI(JndiDataSourceFactory):使用JNDI技术
                也可以使用自定义的连接池,实现DataSourceFactory接口,type为全类名
-->
    <environments default="development">
        <environment id="test">
            <transactionManager type=""/>
            <dataSource type=""/>
        </environment>
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

<!--
    6.databaseIdProvider标签:支持多数据库的厂商,Mybatis根据数据库厂商标识来执行不同的sql,type=DB_VENDOR(VendorDatabaseIdProvider)
        property标签:为数据库厂商起别名
      在映射文件中select标签里databaseId属性可设置数据库厂商别名
      在映射文件中,在相同的数据库环境下,select的id相同时优先匹配拥有databaseId标签的语句
-->
    <databaseIdProvider type="DB_VENDOR">
        <property name="MySQL" value="mysql"/>
        <property name="SQL Server" value="sqlServer"/>
    </databaseIdProvider>

<!--
    7.mappers标签:将写好的sql映射文件注册到全局配置文件中
        mapper标签:注册一个sql映射
            resource:为引用类路径下的sql映射文件
            url:网络路径
            class:注册一个接口
                1).有sql映射文件,映射文件名必须和接口同名,并且与接口放在同一目录下
                2).没有sql映射文件,所有的sql都是利用注解写在接口上
                比较重要,复杂的Dao接口使用映射文件方式,不重要的简单的为了开发迅速可以使用注解
-->
    <mappers>
        <mapper resource="mapper/EmployeeMapper.xml"/>
        <!--<mapper class="com.zlh.mybatis.bean.EmployeeMapper"/>-->
        <mapper class="com.zlh.mybatis.bean.EmployeeMapperAnnotation"/>
    </mappers>
</configuration>
